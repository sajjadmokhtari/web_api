definitions:
  dto.CityResponse:
    properties:
      Id:
        type: integer
      country:
        $ref: '#/definitions/dto.CountryResponse'
      name:
        type: string
    type: object
  dto.CountryResponse:
    properties:
      cities:
        items:
          $ref: '#/definitions/dto.CityResponse'
        type: array
      id:
        type: integer
      name:
        type: string
    type: object
  dto.CreateUpdateCityRequest:
    properties:
      countryId:
        type: integer
      name:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.CreateUpdateCountryRequest:
    properties:
      name:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.FileResponse:
    properties:
      description:
        type: string
      directory:
        type: string
      id:
        type: integer
      mimeType:
        type: string
      name:
        type: string
    type: object
  dto.Filter:
    properties:
      filterType:
        type: string
      from:
        type: string
      to:
        type: string
      type:
        type: string
    type: object
  dto.GetOtpRequest:
    properties:
      mobileNumber:
        description: Mobile number of the user
        maxLength: 11
        minLength: 11
        type: string
    required:
    - mobileNumber
    type: object
  dto.LoginByUsernameRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        minLength: 5
        type: string
    required:
    - password
    - username
    type: object
  dto.PaginationInputWithFilter:
    properties:
      filter:
        additionalProperties:
          $ref: '#/definitions/dto.Filter'
        type: object
      pageNumber:
        type: integer
      pageSize:
        type: integer
      sort:
        items:
          $ref: '#/definitions/dto.Sort'
        type: array
    type: object
  dto.RegisterLoginByMobileRequest:
    properties:
      mobileNumber:
        maxLength: 11
        minLength: 11
        type: string
      otp:
        maxLength: 6
        minLength: 6
        type: string
    required:
    - mobileNumber
    - otp
    type: object
  dto.RegisterUserByUsernameRequest:
    properties:
      email:
        minLength: 6
        type: string
      firstName:
        minLength: 3
        type: string
      lastName:
        minLength: 6
        type: string
      password:
        minLength: 6
        type: string
      username:
        minLength: 5
        type: string
    required:
    - firstName
    - lastName
    - password
    - username
    type: object
  dto.Sort:
    properties:
      col_id:
        type: string
      sort:
        type: string
    type: object
  dto.UpdateFileRequest:
    properties:
      description:
        type: string
    type: object
  handlers.personData:
    properties:
      first_name:
        maxLength: 10
        minLength: 4
        type: string
      last_name:
        maxLength: 20
        minLength: 6
        type: string
      mobile_number:
        maxLength: 11
        minLength: 11
        type: string
    required:
    - first_name
    - last_name
    - mobile_number
    type: object
  helper.BaseHttpResponse:
    properties:
      error: {}
      result: {}
      resultCode:
        $ref: '#/definitions/helper.ResultCode'
      success:
        type: boolean
      validationError:
        items:
          $ref: '#/definitions/validations.ValidationError'
        type: array
    type: object
  helper.ResultCode:
    enum:
    - 0
    - 40001
    - 404401
    - 42901
    - 42902
    - 50001
    - 50002
    - 40101
    - 40301
    type: integer
    x-enum-varnames:
    - Success
    - ValidationError
    - NotFoundError
    - LimiterError
    - OtpLimiterError
    - CustomRecovery
    - InternalError
    - AuthError
    - ForbiddenError
  validations.ValidationError:
    properties:
      message:
        type: string
      property:
        type: string
      tag:
        type: string
      value:
        type: string
    type: object
info:
  contact: {}
paths:
  /Cities/:
    post:
      consumes:
      - application/json
      description: Create a City
      parameters:
      - description: Create a City
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUpdateCityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: City response
          schema:
            $ref: '#/definitions/dto.CityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a City
      tags:
      - Cities
  /Cities/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a City
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deleted successfully
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a City
      tags:
      - Cities
    get:
      consumes:
      - application/json
      description: Get a City
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: City response
          schema:
            $ref: '#/definitions/dto.CityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a City
      tags:
      - Cities
    put:
      consumes:
      - application/json
      description: Update a City
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a City
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUpdateCityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: City response
          schema:
            $ref: '#/definitions/dto.CityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a City
      tags:
      - Cities
  /Cities/get-by-filter:
    post:
      consumes:
      - application/json
      description: Returns paginated list of countries based on filters
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.PaginationInputWithFilter'
      produces:
      - application/json
      responses:
        "200":
          description: City response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Filter Countries by pagination & criteria
      tags:
      - Cities
  /countries/:
    post:
      consumes:
      - application/json
      description: Create a country
      parameters:
      - description: Create a country
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUpdateCountryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Country response
          schema:
            $ref: '#/definitions/dto.CountryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a country
      tags:
      - Countries
  /countries/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a country
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deleted successfully
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a country
      tags:
      - Countries
    get:
      consumes:
      - application/json
      description: Get a country
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Country response
          schema:
            $ref: '#/definitions/dto.CountryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a country
      tags:
      - Countries
    put:
      consumes:
      - application/json
      description: Update a country
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a country
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUpdateCountryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Country response
          schema:
            $ref: '#/definitions/dto.CountryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a country
      tags:
      - Countries
  /countries/get-by-filter:
    post:
      consumes:
      - application/json
      description: Returns paginated list of countries based on filters
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.PaginationInputWithFilter'
      produces:
      - application/json
      responses:
        "200":
          description: Country response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Filter Countries by pagination & criteria
      tags:
      - Countries
  /files/:
    post:
      consumes:
      - multipart/form-data
      description: Create a file
      parameters:
      - description: Uploaded file
        in: formData
        name: file
        required: true
        type: file
      - description: File description
        in: formData
        name: description
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: File response
          schema:
            $ref: '#/definitions/dto.CountryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a file
      tags:
      - Files
  /files/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a file
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deleted successfully
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a file
      tags:
      - Files
    get:
      consumes:
      - application/json
      description: Get a file
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: File Response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a file
      tags:
      - Files
    put:
      consumes:
      - application/json
      description: Update a file
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a file
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateFileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: File response
          schema:
            $ref: '#/definitions/dto.FileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a file
      tags:
      - Files
  /files/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get Files
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.PaginationInputWithFilter'
      produces:
      - application/json
      responses:
        "200":
          description: file response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get Files
      tags:
      - Files
  /users/login-by-mobile:
    post:
      consumes:
      - application/json
      description: Register login by mobile request
      parameters:
      - description: RegisterLoginByMobileRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterLoginByMobileRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "409":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: Register login by mobile request
      tags:
      - users
  /users/login-by-username:
    post:
      consumes:
      - application/json
      description: Login by username
      parameters:
      - description: LoginByUsernameRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginByUsernameRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "409":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: Login by username
      tags:
      - users
  /users/register-by-username:
    post:
      consumes:
      - application/json
      description: Register by username
      parameters:
      - description: RegisterUserByUsernameRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserByUsernameRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "409":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: Register by username
      tags:
      - users
  /users/send-otp:
    post:
      consumes:
      - application/json
      description: Send otp to user
      parameters:
      - description: GetOtpRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.GetOtpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "409":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: Send otp to user
      tags:
      - users
  /v1/health/:
    get:
      consumes:
      - application/json
      description: Health Check
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: Health Check
      tags:
      - health
  /v1/test/binder/body:
    post:
      consumes:
      - application/json
      description: BodyBinder
      parameters:
      - description: person data
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/handlers.personData'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: BodyBinder
      tags:
      - Test
  /v1/test/user/{id}:
    get:
      consumes:
      - application/json
      description: UserById
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: UserById
      tags:
      - Test
securityDefinitions:
  AuthBearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
